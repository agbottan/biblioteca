package br.biblioteca.livros;

import static org.assertj.core.api.Assertions.assertThat;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

import br.biblioteca.repository.AutorRepository;
import br.biblioteca.repository.LivroRepository;
import br.biblioteca.repository.EmprestimoRepository;
import br.biblioteca.model.Autor;
import br.biblioteca.model.Livro;
import br.biblioteca.model.Emprestimo;

/*
------------------
	LEMBRETES
------------------

	CRUD -> 'Create' | 'Read' | 'Delete' | 'Update'
*/


@RunWith(SpringRunner.class)
@SpringBootTest
public class LivrosApplicationTests {

	/*
	--------------------------------
		TESTE 'CRUD' DE AUTORES
	--------------------------------
	*/

	@Autowired
	AutorRepository autorRepository;

	/*
		TESTA A BUSCA DE UM AUTOR PELO NOME
	*/
	@Test
	public void testeBuscarAutorPorNome() {

		/*
		Busca o autor com nome 'Fulado de Tal', que não consta no banco inicial, e verifica o resultado, que deve ser nulo
		*/
		Autor autorNaoEncontrado = this.autorRepository.findByNome("Fulano de Tal");
		assertThat(autorNaoEncontrado).isNull();
		
		/*
		Busca o autor 'Machado de Assis', que consta no banco inicial, e verifica o resultado, que deve ser 'não nulo', e a propriedade nome, que deve ser 'Machado de Assis'
		*/
		Autor autorEncontrado = this.autorRepository.findByNome("Machado de Assis");
		assertThat(autorEncontrado).isNotNull();
		assertThat(autorEncontrado.getNome()).isEqualTo("Machado de Assis");
	}

	/*
		TESTA A ALTERAÇÃO DO NOME DE UM AUTOR
	*/
	@Test
	public void testeAlterarNomeAutor() {

		// Busca o autor com nome 'Machado de Assis', que consta no banco inicial, altera o nome para 'Machado de Assis <ALTERADO>' e armazena a ID do autorTeste para comparação posterior
		Autor autorTeste = this.autorRepository.findByNome("Machado de Assis");
		Long autorTesteId = autorTeste.getId();

		// Altera o nome do autorTeste 'Machado de Assis' para 'Machado de Assis <ALTERADO>' e salva no banco
		autorTeste.setNome("Machado de Assis <ALTERADO>");
		this.autorRepository.save(autorTeste);

		// Busca o autor com a Id de 'autorTeste', que deve se referir ao mesmo registro no banco
		Autor autorTesteConfirma = this.autorRepository.findOne(autorTesteId);

		// Verifica se os nomes de 'autorTeste' e 'autorTesteAlterado' são iguais
		assertThat(autorTesteConfirma.getNome()).isEqualTo(autorTeste.getNome());

		// Restaura o nome original para não alterar o banco
		autorTeste.setNome("Machado de Assis");
		this.autorRepository.save(autorTeste);
	}

	/*
		TESTA A INCLUSÃO DE UM NOVO AUTOR
	*/
	@Test
	public void testeIncluirAutor() {

		// Cria um novo autor com nome 'TESTE DE INCLUSÃO' e insere no banco
		Autor autorInserido = new Autor();
		autorInserido.setNome("TESTE DE INCLUSÃO");
		this.autorRepository.save(autorInserido);

		// Verifica se há no banco um autor com o nome 'TESTE DE INCLUSÃO', que é o que acabamos de inserir
		Autor autorEncontrado = this.autorRepository.findByNome("TESTE DE INCLUSÃO");
		assertThat(autorEncontrado).isNotNull();

		// Remove o autor incluido no teste, para que o banco retorne ao estado inicial
		this.autorRepository.delete(autorEncontrado);
	}

	/*
		TESTA A EXCLUSÃO DE UM AUTOR
	*/
	@Test
	public void testeExcluirAutor() {

		// Cria um novo autor com nome 'TESTE DE EXCLUSÃO' e insere no banco
		Autor autorExcluido = new Autor();
		autorExcluido.setNome("TESTE DE EXCLUSÃO");
		this.autorRepository.save(autorExcluido);

		// Verifica se há no banco um autor com o nome 'TESTE DE EXCLUSÃO', que é o que acabamos de inserir
		autorExcluido = this.autorRepository.findByNome("TESTE DE EXCLUSÃO");
		assertThat(autorExcluido).isNotNull();

		// Remove o autor incluido no teste e faz uma busca de autor pelo noma, para verificar se foi excluído
		this.autorRepository.delete(autorExcluido);
		autorExcluido = this.autorRepository.findByNome("TESTE DE EXCLUSÃO");
		assertThat(autorExcluido).isNull();
	}

	/*
	--------------------------------
		TESTE 'CRUD' DE LIVROS
	--------------------------------
	*/

	@Autowired
	LivroRepository livroRepository;

	/*
		TESTA A BUSCA DE UM LIVRO PELO NOME
	*/
	@Test
	public void testeBuscarLivroPorNome() {

		/*
		Busca o livro com nome 'Livro Ausente', que não consta no banco inicial, e verifica o resultado, que deve ser nulo
		*/
		Livro livroNaoEncontrado = this.livroRepository.findByNome("Livro Ausente");
		assertThat(livroNaoEncontrado).isNull();
		
		/*
		Busca o livro 'Dom Casmurro', que consta no banco inicial, e verifica o resultado, que deve ser 'não nulo', e a propriedade nome, que deve ser 'Machado de Assis'
		*/
		Livro livroEncontrado = this.livroRepository.findByNome("Dom Casmurro");
		assertThat(livroEncontrado).isNotNull();
		assertThat(livroEncontrado.getNome()).isEqualTo("Dom Casmurro");
	}

	/*
		TESTA A ALTERAÇÃO DO NOME DE UM LIVRO
	*/
	@Test
	public void testeAlterarNomeLivro() {

		// Busca o livro com nome 'Dom Casmurro', que consta no banco inicial, altera o nome para 'Dom Casmurro <ALTERADO>' e armazena a ID para comparação posterior
		Livro livroTeste = this.livroRepository.findByNome("Dom Casmurro");
		Long livroTesteId = livroTeste.getId();

		// Altera o nome do livroTeste 'Machado de Assis' para 'Machado de Assis <ALTERADO>' e salva no banco
		livroTeste.setNome("Dom Casmurro <ALTERADO>");
		this.livroRepository.save(livroTeste);

		// Busca o livro com a Id de 'livroTeste', que deve se referir ao mesmo registro no banco
		Livro livroTesteConfirma = this.livroRepository.findOne(livroTesteId);

		// Verifica se os nomes de 'livroTeste' e 'livroTesteAlterado' são iguais
		assertThat(livroTesteConfirma.getNome()).isEqualTo(livroTeste.getNome());

		// Restaura o nome original para não alterar o banco
		livroTeste.setNome("Dom Casmurro");
		this.livroRepository.save(livroTeste);
	}

	/*
		TESTA A INCLUSÃO DE UM NOVO LIVRO
	*/
	@Test
	public void testeIncluirLivro() {

		// Cria um novo livro com nome 'TESTE DE INCLUSÃO' e insere no banco
		Livro livroInserido = new Livro();
			livroInserido.setNome("TESTE DE INCLUSÃO");
			livroInserido.setQuantidadePaginas(100l);

		this.livroRepository.save(livroInserido);

		// Verifica se há no banco um livro com o nome 'TESTE DE INCLUSÃO', que é o que acabamos de inserir
		Livro livroEncontrado = this.livroRepository.findByNome("TESTE DE INCLUSÃO");
		assertThat(livroEncontrado).isNotNull();

		// Remove o livro incluido no teste, para que o banco retorne ao estado inicial
		this.livroRepository.delete(livroEncontrado);
	}

	/*
		TESTA A EXCLUSÃO DE UM LIVRO
	*/
	@Test
	public void testeExcluirEmprestimo() {

		// Cria um novo livro com nome 'TESTE DE EXCLUSÃO' e insere no banco
		Livro livroExcluido = new Livro();
			livroExcluido.setNome("TESTE DE EXCLUSÃO");
			livroExcluido.setQuantidadePaginas(100l);

		this.livroRepository.save(livroExcluido);

		// Verifica se há no banco um livro com o nome 'TESTE DE EXCLUSÃO', que é o que acabamos de inserir
		livroExcluido = this.livroRepository.findByNome("TESTE DE EXCLUSÃO");
		assertThat(livroExcluido).isNotNull();

		// Remove o livro incluido no teste e faz uma busca de livro pelo noma, para verificar se foi excluído
		this.livroRepository.delete(livroExcluido);
		livroExcluido = this.livroRepository.findByNome("TESTE DE EXCLUSÃO");
		assertThat(livroExcluido).isNull();
	}

	/*
	------------------------------------
		TESTE 'CRUD' DE EMPRÉSTIMOS
	------------------------------------
	*/

	@Autowired
	EmprestimoRepository emprestimoRepository;

	/*
		TESTA A BUSCA DE UM EMPRÉSTIMO PELO NOME
	*/
	@Test
	public void testeBuscarEmprestimoPorId() {

		/*
		Busca o empréstimo com Id 3, que não consta no banco inicial, e verifica o resultado, que deve ser nulo
		*/
		Emprestimo emprestimoNaoEncontrado = this.emprestimoRepository.findOne(1l);
		assertThat(emprestimoNaoEncontrado).isNull();
		
		/*
		Busca o empréstimo 'Dom Casmurro', que consta no banco inicial, e verifica o resultado, que deve ser 'não nulo', e a propriedade nome, que deve ser 'Machado de Assis'
		*/
		Emprestimo emprestimoEncontrado = this.emprestimoRepository.findByNome("Dom Casmurro");
		assertThat(emprestimoEncontrado).isNotNull();
		assertThat(emprestimoEncontrado.getNome()).isEqualTo("Dom Casmurro");
	}

	/*
		TESTA A ALTERAÇÃO DO NOME DE UM EMPRÉSTIMO
	*/
	@Test
	public void testeAlterarNomeEmprestimo() {

		// Busca o empréstimo com nome 'Dom Casmurro', que consta no banco inicial, altera o nome para 'Dom Casmurro <ALTERADO>' e armazena a ID para comparação posterior
		Emprestimo emprestimoTeste = this.emprestimoRepository.findByNome("Dom Casmurro");
		Long emprestimoTesteId = emprestimoTeste.getId();

		// Altera o nome do emprestimoTeste 'Machado de Assis' para 'Machado de Assis <ALTERADO>' e salva no banco
		emprestimoTeste.setNome("Dom Casmurro <ALTERADO>");
		this.emprestimoRepository.save(emprestimoTeste);

		// Busca o empréstimo com a Id de 'emprestimoTeste', que deve se referir ao mesmo registro no banco
		Emprestimo emprestimoTesteConfirma = this.emprestimoRepository.findOne(emprestimoTesteId);

		// Verifica se os nomes de 'emprestimoTeste' e 'emprestimoTesteAlterado' são iguais
		assertThat(emprestimoTesteConfirma.getNome()).isEqualTo(emprestimoTeste.getNome());

		// Restaura o nome original para não alterar o banco
		emprestimoTeste.setNome("Dom Casmurro");
		this.emprestimoRepository.save(emprestimoTeste);
	}

	/*
		TESTA A INCLUSÃO DE UM NOVO EMPRÉSTIMO
	*/
	@Test
	public void testeIncluirEmprestimo() {

		// Cria um novo empréstimo com nome 'TESTE DE INCLUSÃO' e insere no banco
		Emprestimo emprestimoInserido = new Emprestimo();
			emprestimoInserido.setNome("TESTE DE INCLUSÃO");
			emprestimoInserido.setQuantidadePaginas(100l);

		this.emprestimoRepository.save(emprestimoInserido);

		// Verifica se há no banco um empréstimo com o nome 'TESTE DE INCLUSÃO', que é o que acabamos de inserir
		Emprestimo emprestimoEncontrado = this.emprestimoRepository.findByNome("TESTE DE INCLUSÃO");
		assertThat(emprestimoEncontrado).isNotNull();

		// Remove o empréstimo incluido no teste, para que o banco retorne ao estado inicial
		this.emprestimoRepository.delete(emprestimoEncontrado);
	}

	/*
		TESTA A EXCLUSÃO DE UM EMPRÉSTIMO
	*/
	@Test
	public void testeExcluirLivro() {

		// Cria um novo empréstimo com nome 'TESTE DE EXCLUSÃO' e insere no banco
		Emprestimo emprestimoExcluido = new Emprestimo();
			emprestimoExcluido.setNome("TESTE DE EXCLUSÃO");
			emprestimoExcluido.setQuantidadePaginas(100l);

		this.emprestimoRepository.save(emprestimoExcluido);

		// Verifica se há no banco um empréstimo com o nome 'TESTE DE EXCLUSÃO', que é o que acabamos de inserir
		emprestimoExcluido = this.emprestimoRepository.findByNome("TESTE DE EXCLUSÃO");
		assertThat(emprestimoExcluido).isNotNull();

		// Remove o empréstimo incluido no teste e faz uma busca de empréstimo pelo noma, para verificar se foi excluído
		this.emprestimoRepository.delete(emprestimoExcluido);
		emprestimoExcluido = this.emprestimoRepository.findByNome("TESTE DE EXCLUSÃO");
		assertThat(emprestimoExcluido).isNull();
	}
}
